<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mermaid@v10.6.1 Syntax on My New Hugo Site</title><link>https://blahvalf.github.io/docs/mix/mermaid/</link><description>Recent content in Mermaid@v10.6.1 Syntax on My New Hugo Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://blahvalf.github.io/docs/mix/mermaid/index.xml" rel="self" type="application/rss+xml"/><item><title>C4 Diagrams</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/c4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/c4/</guid><description>&lt;h1 id="c4-diagrams">C4 Diagrams &lt;a href="#c4-diagrams" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>C4 Diagram: This is an experimental diagram for now. The syntax and properties can change in future releases. Proper documentation will be provided when the syntax is stable.&lt;/p>&lt;/blockquote>
&lt;p>Mermaid&amp;rsquo;s C4 diagram syntax is compatible with plantUML. See example below:&lt;/p>



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="5f1ac66" class="language-mermaid-example ">
 &lt;code> C4Context
 title System Context diagram for Internet Banking System
 Enterprise_Boundary(b0, &amp;#34;BankBoundary0&amp;#34;) {
 Person(customerA, &amp;#34;Banking Customer A&amp;#34;, &amp;#34;A customer of the bank, with personal bank accounts.&amp;#34;)
 Person(customerB, &amp;#34;Banking Customer B&amp;#34;)
 Person_Ext(customerC, &amp;#34;Banking Customer C&amp;#34;, &amp;#34;desc&amp;#34;)

 Person(customerD, &amp;#34;Banking Customer D&amp;#34;, &amp;#34;A customer of the bank, &amp;lt;br/&amp;gt; with personal bank accounts.&amp;#34;)

 System(SystemAA, &amp;#34;Internet Banking System&amp;#34;, &amp;#34;Allows customers to view information about their bank accounts, and make payments.&amp;#34;)

 Enterprise_Boundary(b1, &amp;#34;BankBoundary&amp;#34;) {

 SystemDb_Ext(SystemE, &amp;#34;Mainframe Banking System&amp;#34;, &amp;#34;Stores all of the core banking information about customers, accounts, transactions, etc.&amp;#34;)

 System_Boundary(b2, &amp;#34;BankBoundary2&amp;#34;) {
 System(SystemA, &amp;#34;Banking System A&amp;#34;)
 System(SystemB, &amp;#34;Banking System B&amp;#34;, &amp;#34;A system of the bank, with personal bank accounts. next line.&amp;#34;)
 }

 System_Ext(SystemC, &amp;#34;E-mail system&amp;#34;, &amp;#34;The internal Microsoft Exchange e-mail system.&amp;#34;)
 SystemDb(SystemD, &amp;#34;Banking System D Database&amp;#34;, &amp;#34;A system of the bank, with personal bank accounts.&amp;#34;)

 Boundary(b3, &amp;#34;BankBoundary3&amp;#34;, &amp;#34;boundary&amp;#34;) {
 SystemQueue(SystemF, &amp;#34;Banking System F Queue&amp;#34;, &amp;#34;A system of the bank.&amp;#34;)
 SystemQueue_Ext(SystemG, &amp;#34;Banking System G Queue&amp;#34;, &amp;#34;A system of the bank, with personal bank accounts.&amp;#34;)
 }
 }
 }

 BiRel(customerA, SystemAA, &amp;#34;Uses&amp;#34;)
 BiRel(SystemAA, SystemE, &amp;#34;Uses&amp;#34;)
 Rel(SystemAA, SystemC, &amp;#34;Sends e-mails&amp;#34;, &amp;#34;SMTP&amp;#34;)
 Rel(SystemC, customerA, &amp;#34;Sends e-mails to&amp;#34;)

 UpdateElementStyle(customerA, $fontColor=&amp;#34;red&amp;#34;, $bgColor=&amp;#34;grey&amp;#34;, $borderColor=&amp;#34;red&amp;#34;)
 UpdateRelStyle(customerA, SystemAA, $textColor=&amp;#34;blue&amp;#34;, $lineColor=&amp;#34;blue&amp;#34;, $offsetX=&amp;#34;5&amp;#34;)
 UpdateRelStyle(SystemAA, SystemE, $textColor=&amp;#34;blue&amp;#34;, $lineColor=&amp;#34;blue&amp;#34;, $offsetY=&amp;#34;-10&amp;#34;)
 UpdateRelStyle(SystemAA, SystemC, $textColor=&amp;#34;blue&amp;#34;, $lineColor=&amp;#34;blue&amp;#34;, $offsetY=&amp;#34;-40&amp;#34;, $offsetX=&amp;#34;-50&amp;#34;)
 UpdateRelStyle(SystemC, customerA, $textColor=&amp;#34;red&amp;#34;, $lineColor=&amp;#34;red&amp;#34;, $offsetX=&amp;#34;-50&amp;#34;, $offsetY=&amp;#34;20&amp;#34;)

 UpdateLayoutConfig($c4ShapeInRow=&amp;#34;3&amp;#34;, $c4BoundaryInRow=&amp;#34;1&amp;#34;)&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;pre class="mermaid"> C4Context
 title System Context diagram for Internet Banking System
 Enterprise_Boundary(b0, &amp;#34;BankBoundary0&amp;#34;) {
 Person(customerA, &amp;#34;Banking Customer A&amp;#34;, &amp;#34;A customer of the bank, with personal bank accounts.&amp;#34;)
 Person(customerB, &amp;#34;Banking Customer B&amp;#34;)
 Person_Ext(customerC, &amp;#34;Banking Customer C&amp;#34;, &amp;#34;desc&amp;#34;)

 Person(customerD, &amp;#34;Banking Customer D&amp;#34;, &amp;#34;A customer of the bank, &amp;lt;br/&amp;gt; with personal bank accounts.&amp;#34;)

 System(SystemAA, &amp;#34;Internet Banking System&amp;#34;, &amp;#34;Allows customers to view information about their bank accounts, and make payments.&amp;#34;)

 Enterprise_Boundary(b1, &amp;#34;BankBoundary&amp;#34;) {

 SystemDb_Ext(SystemE, &amp;#34;Mainframe Banking System&amp;#34;, &amp;#34;Stores all of the core banking information about customers, accounts, transactions, etc.&amp;#34;)

 System_Boundary(b2, &amp;#34;BankBoundary2&amp;#34;) {
 System(SystemA, &amp;#34;Banking System A&amp;#34;)
 System(SystemB, &amp;#34;Banking System B&amp;#34;, &amp;#34;A system of the bank, with personal bank accounts. next line.&amp;#34;)
 }

 System_Ext(SystemC, &amp;#34;E-mail system&amp;#34;, &amp;#34;The internal Microsoft Exchange e-mail system.&amp;#34;)
 SystemDb(SystemD, &amp;#34;Banking System D Database&amp;#34;, &amp;#34;A system of the bank, with personal bank accounts.&amp;#34;)

 Boundary(b3, &amp;#34;BankBoundary3&amp;#34;, &amp;#34;boundary&amp;#34;) {
 SystemQueue(SystemF, &amp;#34;Banking System F Queue&amp;#34;, &amp;#34;A system of the bank.&amp;#34;)
 SystemQueue_Ext(SystemG, &amp;#34;Banking System G Queue&amp;#34;, &amp;#34;A system of the bank, with personal bank accounts.&amp;#34;)
 }
 }
 }

 BiRel(customerA, SystemAA, &amp;#34;Uses&amp;#34;)
 BiRel(SystemAA, SystemE, &amp;#34;Uses&amp;#34;)
 Rel(SystemAA, SystemC, &amp;#34;Sends e-mails&amp;#34;, &amp;#34;SMTP&amp;#34;)
 Rel(SystemC, customerA, &amp;#34;Sends e-mails to&amp;#34;)

 UpdateElementStyle(customerA, $fontColor=&amp;#34;red&amp;#34;, $bgColor=&amp;#34;grey&amp;#34;, $borderColor=&amp;#34;red&amp;#34;)
 UpdateRelStyle(customerA, SystemAA, $textColor=&amp;#34;blue&amp;#34;, $lineColor=&amp;#34;blue&amp;#34;, $offsetX=&amp;#34;5&amp;#34;)
 UpdateRelStyle(SystemAA, SystemE, $textColor=&amp;#34;blue&amp;#34;, $lineColor=&amp;#34;blue&amp;#34;, $offsetY=&amp;#34;-10&amp;#34;)
 UpdateRelStyle(SystemAA, SystemC, $textColor=&amp;#34;blue&amp;#34;, $lineColor=&amp;#34;blue&amp;#34;, $offsetY=&amp;#34;-40&amp;#34;, $offsetX=&amp;#34;-50&amp;#34;)
 UpdateRelStyle(SystemC, customerA, $textColor=&amp;#34;red&amp;#34;, $lineColor=&amp;#34;red&amp;#34;, $offsetX=&amp;#34;-50&amp;#34;, $offsetY=&amp;#34;20&amp;#34;)

 UpdateLayoutConfig($c4ShapeInRow=&amp;#34;3&amp;#34;, $c4BoundaryInRow=&amp;#34;1&amp;#34;)
&lt;/pre>
&lt;p>For an example, see the source code demos/index.html&lt;/p></description></item><item><title>Class diagrams</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/classdiagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/classdiagram/</guid><description>&lt;h1 id="class-diagrams">Class diagrams &lt;a href="#class-diagrams" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>&amp;ldquo;In software engineering, a class diagram in the Unified Modeling Language (UML) is a type of static structure diagram that describes the structure of a system by showing the system&amp;rsquo;s classes, their attributes, operations (or methods), and the relationships among objects.&amp;rdquo;&lt;/p>
&lt;p>-Wikipedia&lt;/p>&lt;/blockquote>
&lt;p>The class diagram is the main building block of object-oriented modeling. It is used for general conceptual modeling of the structure of the application, and for detailed modeling to translate the models into programming code. Class diagrams can also be used for data modeling. The classes in a class diagram represent both the main elements, interactions in the application, and the classes to be programmed.&lt;/p></description></item><item><title>Entity Relationship Diagrams</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/entityrelationshipdiagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/entityrelationshipdiagram/</guid><description>&lt;h1 id="entity-relationship-diagrams">Entity Relationship Diagrams &lt;a href="#entity-relationship-diagrams" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>An entity–relationship model (or ER model) describes interrelated things of interest in a specific domain of knowledge. A basic ER model is composed of entity types (which classify the things of interest) and specifies relationships that can exist between entities (instances of those entity types). Wikipedia.&lt;/p>&lt;/blockquote>
&lt;p>Note that practitioners of ER modelling almost always refer to &lt;em>entity types&lt;/em> simply as &lt;em>entities&lt;/em>. For example the &lt;code>CUSTOMER&lt;/code> entity &lt;em>type&lt;/em> would be referred to simply as the &lt;code>CUSTOMER&lt;/code> entity. This is so common it would be inadvisable to do anything else, but technically an entity is an abstract &lt;em>instance&lt;/em> of an entity type, and this is what an ER diagram shows - abstract instances, and the relationships between them. This is why entities are always named using singular nouns.&lt;/p></description></item><item><title>Examples</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/examples/</guid><description>&lt;h1 id="examples">Examples &lt;a href="#examples" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>This page contains a collection of examples of diagrams and charts that can be created through mermaid and its myriad applications.&lt;/p>
&lt;p>&lt;strong>If you wish to learn how to support mermaid on your webpage, read the &lt;a href="../config/usage.md?id=usage">Beginner&amp;rsquo;s Guide&lt;/a>.&lt;/strong>&lt;/p>
&lt;p>&lt;strong>If you wish to learn about mermaid&amp;rsquo;s syntax, Read the &lt;a data-bs-delay="{&amp;#34;hide&amp;#34;:300,&amp;#34;show&amp;#34;:550}" data-bs-html="true" data-bs-title="&lt;a href='https://blahvalf.github.io/docs/mix/mermaid/syntax/flowchart/'>&lt;p>MERMAID@V10.6.1 SYNTAX&lt;/p>&lt;strong>Flowcharts - Basic Syntax&lt;/strong>&lt;br>&lt;/a>" data-bs-toggle="tooltip" href="https://blahvalf.github.io/docs/mix/mermaid/syntax/flowchart/?id=flowcharts-basic-syntax">Diagram Syntax&lt;/a> section.&lt;/strong>&lt;/p>
&lt;h2 id="basic-pie-chart">Basic Pie Chart &lt;a href="#basic-pie-chart" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="f8b253f" class="language-mermaid-example ">
 &lt;code>pie title NETFLIX
 &amp;#34;Time spent looking for movie&amp;#34; : 90
 &amp;#34;Time spent watching it&amp;#34; : 10&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;pre class="mermaid">pie title NETFLIX
 &amp;#34;Time spent looking for movie&amp;#34; : 90
 &amp;#34;Time spent watching it&amp;#34; : 10
&lt;/pre>



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="cd5f60d" class="language-mermaid-example ">
 &lt;code>pie title What Voldemort doesn&amp;#39;t have?
 &amp;#34;FRIENDS&amp;#34; : 2
 &amp;#34;FAMILY&amp;#34; : 3
 &amp;#34;NOSE&amp;#34; : 45&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;pre class="mermaid">pie title What Voldemort doesn&amp;#39;t have?
 &amp;#34;FRIENDS&amp;#34; : 2
 &amp;#34;FAMILY&amp;#34; : 3
 &amp;#34;NOSE&amp;#34; : 45
&lt;/pre>
&lt;h2 id="basic-sequence-diagram">Basic sequence diagram &lt;a href="#basic-sequence-diagram" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="2ddbfd1" class="language-mermaid-example ">
 &lt;code>sequenceDiagram
 Alice -&amp;gt;&amp;gt; Bob: Hello Bob, how are you?
 Bob--&amp;gt;&amp;gt;John: How about you John?
 Bob--x Alice: I am good thanks!
 Bob-x John: I am good thanks!
 Note right of John: Bob thinks a long&amp;lt;br/&amp;gt;long time, so long&amp;lt;br/&amp;gt;that the text does&amp;lt;br/&amp;gt;not fit on a row.

 Bob--&amp;gt;Alice: Checking with John...
 Alice-&amp;gt;John: Yes... John, how are you?&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;pre class="mermaid">sequenceDiagram
 Alice -&amp;gt;&amp;gt; Bob: Hello Bob, how are you?
 Bob--&amp;gt;&amp;gt;John: How about you John?
 Bob--x Alice: I am good thanks!
 Bob-x John: I am good thanks!
 Note right of John: Bob thinks a long&amp;lt;br/&amp;gt;long time, so long&amp;lt;br/&amp;gt;that the text does&amp;lt;br/&amp;gt;not fit on a row.

 Bob--&amp;gt;Alice: Checking with John...
 Alice-&amp;gt;John: Yes... John, how are you?
&lt;/pre>
&lt;h2 id="basic-flowchart">Basic flowchart &lt;a href="#basic-flowchart" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="e592583" class="language-mermaid-example ">
 &lt;code>graph LR
 A[Square Rect] -- Link text --&amp;gt; B((Circle))
 A --&amp;gt; C(Round Rect)
 B --&amp;gt; D{Rhombus}
 C --&amp;gt; D&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;pre class="mermaid">graph LR
 A[Square Rect] -- Link text --&amp;gt; B((Circle))
 A --&amp;gt; C(Round Rect)
 B --&amp;gt; D{Rhombus}
 C --&amp;gt; D
&lt;/pre>
&lt;h2 id="larger-flowchart-with-some-styling">Larger flowchart with some styling &lt;a href="#larger-flowchart-with-some-styling" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="d4f2484" class="language-mermaid-example ">
 &lt;code>graph TB
 sq[Square shape] --&amp;gt; ci((Circle shape))

 subgraph A
 od&amp;gt;Odd shape]-- Two line&amp;lt;br/&amp;gt;edge comment --&amp;gt; ro
 di{Diamond with &amp;lt;br/&amp;gt; line break} -.-&amp;gt; ro(Rounded&amp;lt;br&amp;gt;square&amp;lt;br&amp;gt;shape)
 di==&amp;gt;ro2(Rounded square shape)
 end

 %% Notice that no text in shape are added here instead that is appended further down
 e --&amp;gt; od3&amp;gt;Really long text with linebreak&amp;lt;br&amp;gt;in an Odd shape]

 %% Comments after double percent signs
 e((Inner / circle&amp;lt;br&amp;gt;and some odd &amp;lt;br&amp;gt;special characters)) --&amp;gt; f(,.?!&amp;#43;-*ز)

 cyr[Cyrillic]--&amp;gt;cyr2((Circle shape Начало));

 classDef green fill:#9f6,stroke:#333,stroke-width:2px;
 classDef orange fill:#f96,stroke:#333,stroke-width:4px;
 class sq,e green
 class di orange&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;pre class="mermaid">graph TB
 sq[Square shape] --&amp;gt; ci((Circle shape))

 subgraph A
 od&amp;gt;Odd shape]-- Two line&amp;lt;br/&amp;gt;edge comment --&amp;gt; ro
 di{Diamond with &amp;lt;br/&amp;gt; line break} -.-&amp;gt; ro(Rounded&amp;lt;br&amp;gt;square&amp;lt;br&amp;gt;shape)
 di==&amp;gt;ro2(Rounded square shape)
 end

 %% Notice that no text in shape are added here instead that is appended further down
 e --&amp;gt; od3&amp;gt;Really long text with linebreak&amp;lt;br&amp;gt;in an Odd shape]

 %% Comments after double percent signs
 e((Inner / circle&amp;lt;br&amp;gt;and some odd &amp;lt;br&amp;gt;special characters)) --&amp;gt; f(,.?!&amp;#43;-*ز)

 cyr[Cyrillic]--&amp;gt;cyr2((Circle shape Начало));

 classDef green fill:#9f6,stroke:#333,stroke-width:2px;
 classDef orange fill:#f96,stroke:#333,stroke-width:4px;
 class sq,e green
 class di orange
&lt;/pre>
&lt;h2 id="sequencediagram-loops-alt-and-opt">SequenceDiagram: Loops, alt and opt &lt;a href="#sequencediagram-loops-alt-and-opt" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="df6ff2c" class="language-mermaid-example ">
 &lt;code>sequenceDiagram
 loop Daily query
 Alice-&amp;gt;&amp;gt;Bob: Hello Bob, how are you?
 alt is sick
 Bob-&amp;gt;&amp;gt;Alice: Not so good :(
 else is well
 Bob-&amp;gt;&amp;gt;Alice: Feeling fresh like a daisy
 end

 opt Extra response
 Bob-&amp;gt;&amp;gt;Alice: Thanks for asking
 end
 end&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;pre class="mermaid">sequenceDiagram
 loop Daily query
 Alice-&amp;gt;&amp;gt;Bob: Hello Bob, how are you?
 alt is sick
 Bob-&amp;gt;&amp;gt;Alice: Not so good :(
 else is well
 Bob-&amp;gt;&amp;gt;Alice: Feeling fresh like a daisy
 end

 opt Extra response
 Bob-&amp;gt;&amp;gt;Alice: Thanks for asking
 end
 end
&lt;/pre>
&lt;h2 id="sequencediagram-message-to-self-in-loop">SequenceDiagram: Message to self in loop &lt;a href="#sequencediagram-message-to-self-in-loop" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="209efa0" class="language-mermaid-example ">
 &lt;code>sequenceDiagram
 participant Alice
 participant Bob
 Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
 loop Healthcheck
 John-&amp;gt;&amp;gt;John: Fight against hypochondria
 end
 Note right of John: Rational thoughts&amp;lt;br/&amp;gt;prevail...
 John--&amp;gt;&amp;gt;Alice: Great!
 John-&amp;gt;&amp;gt;Bob: How about you?
 Bob--&amp;gt;&amp;gt;John: Jolly good!&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;pre class="mermaid">sequenceDiagram
 participant Alice
 participant Bob
 Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
 loop Healthcheck
 John-&amp;gt;&amp;gt;John: Fight against hypochondria
 end
 Note right of John: Rational thoughts&amp;lt;br/&amp;gt;prevail...
 John--&amp;gt;&amp;gt;Alice: Great!
 John-&amp;gt;&amp;gt;Bob: How about you?
 Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/pre>
&lt;h2 id="sequence-diagram-blogging-app-service-communication">Sequence Diagram: Blogging app service communication &lt;a href="#sequence-diagram-blogging-app-service-communication" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="6967eec" class="language-mermaid-example ">
 &lt;code>sequenceDiagram
 participant web as Web Browser
 participant blog as Blog Service
 participant account as Account Service
 participant mail as Mail Service
 participant db as Storage

 Note over web,db: The user must be logged in to submit blog posts
 web-&amp;gt;&amp;gt;&amp;#43;account: Logs in using credentials
 account-&amp;gt;&amp;gt;db: Query stored accounts
 db-&amp;gt;&amp;gt;account: Respond with query result

 alt Credentials not found
 account-&amp;gt;&amp;gt;web: Invalid credentials
 else Credentials found
 account-&amp;gt;&amp;gt;-web: Successfully logged in

 Note over web,db: When the user is authenticated, they can now submit new posts
 web-&amp;gt;&amp;gt;&amp;#43;blog: Submit new post
 blog-&amp;gt;&amp;gt;db: Store post data

 par Notifications
 blog--)mail: Send mail to blog subscribers
 blog--)db: Store in-site notifications
 and Response
 blog--&amp;gt;&amp;gt;-web: Successfully posted
 end
 end&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;pre class="mermaid">sequenceDiagram
 participant web as Web Browser
 participant blog as Blog Service
 participant account as Account Service
 participant mail as Mail Service
 participant db as Storage

 Note over web,db: The user must be logged in to submit blog posts
 web-&amp;gt;&amp;gt;&amp;#43;account: Logs in using credentials
 account-&amp;gt;&amp;gt;db: Query stored accounts
 db-&amp;gt;&amp;gt;account: Respond with query result

 alt Credentials not found
 account-&amp;gt;&amp;gt;web: Invalid credentials
 else Credentials found
 account-&amp;gt;&amp;gt;-web: Successfully logged in

 Note over web,db: When the user is authenticated, they can now submit new posts
 web-&amp;gt;&amp;gt;&amp;#43;blog: Submit new post
 blog-&amp;gt;&amp;gt;db: Store post data

 par Notifications
 blog--)mail: Send mail to blog subscribers
 blog--)db: Store in-site notifications
 and Response
 blog--&amp;gt;&amp;gt;-web: Successfully posted
 end
 end
&lt;/pre>
&lt;h2 id="a-commit-flow-diagram">A commit flow diagram. &lt;a href="#a-commit-flow-diagram" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="fdae4d6" class="language-mermaid-example ">
 &lt;code>gitGraph:
 commit &amp;#34;Ashish&amp;#34;
 branch newbranch
 checkout newbranch
 commit id:&amp;#34;1111&amp;#34;
 commit tag:&amp;#34;test&amp;#34;
 checkout main
 commit type: HIGHLIGHT
 commit
 merge newbranch
 commit
 branch b2
 commit&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;pre class="mermaid">gitGraph:
 commit &amp;#34;Ashish&amp;#34;
 branch newbranch
 checkout newbranch
 commit id:&amp;#34;1111&amp;#34;
 commit tag:&amp;#34;test&amp;#34;
 checkout main
 commit type: HIGHLIGHT
 commit
 merge newbranch
 commit
 branch b2
 commit
&lt;/pre></description></item><item><title>Flowcharts - Basic Syntax</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/flowchart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/flowchart/</guid><description>&lt;h1 id="flowcharts---basic-syntax">Flowcharts - Basic Syntax &lt;a href="#flowcharts---basic-syntax" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Flowcharts are composed of &lt;strong>nodes&lt;/strong> (geometric shapes) and &lt;strong>edges&lt;/strong> (arrows or lines). The Mermaid code defines how nodes and edges are made and accommodates different arrow types, multi-directional arrows, and any linking to and from subgraphs.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Warning&lt;/strong>
If you are using the word &amp;ldquo;end&amp;rdquo; in a Flowchart node, capitalize the entire word or any of the letters (e.g., &amp;ldquo;End&amp;rdquo; or &amp;ldquo;END&amp;rdquo;), or apply this &lt;a href="https://github.com/mermaid-js/mermaid/issues/1444#issuecomment-639528897" rel="external" target="_blank">workaround&lt;svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">&lt;path fill="currentColor" d="M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z"/>&lt;/svg>&lt;/a>. Typing &amp;ldquo;end&amp;rdquo; in all lowercase letters will break the Flowchart.&lt;/p></description></item><item><title>Gantt diagrams</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/gantt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/gantt/</guid><description>&lt;h1 id="gantt-diagrams">Gantt diagrams &lt;a href="#gantt-diagrams" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>A Gantt chart is a type of bar chart, first developed by Karol Adamiecki in 1896, and independently by Henry Gantt in the 1910s, that illustrates a project schedule and the amount of time it would take for any one project to finish. Gantt charts illustrate number of days between the start and finish dates of the terminal elements and summary elements of a project.&lt;/p>&lt;/blockquote>
&lt;h2 id="a-note-to-users">A note to users &lt;a href="#a-note-to-users" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Gantt Charts will record each scheduled task as one continuous bar that extends from the left to the right. The x axis represents time and the y records the different tasks and the order in which they are to be completed.&lt;/p></description></item><item><title>Gitgraph Diagrams</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/gitgraph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/gitgraph/</guid><description>&lt;h1 id="gitgraph-diagrams">Gitgraph Diagrams &lt;a href="#gitgraph-diagrams" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>A Git Graph is a pictorial representation of git commits and git actions(commands) on various branches.&lt;/p>&lt;/blockquote>
&lt;p>These kind of diagram are particularly helpful to developers and devops teams to share their Git branching strategies. For example, it makes it easier to visualize how git flow works.&lt;/p>
&lt;p>Mermaid can render Git diagrams&lt;/p>



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="4aa8f13" class="language-mermaid-example ">
 &lt;code>---
title: Example Git diagram
---
gitGraph
 commit
 commit
 branch develop
 checkout develop
 commit
 commit
 checkout main
 merge develop
 commit
 commit&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;pre class="mermaid">---
title: Example Git diagram
---
gitGraph
 commit
 commit
 branch develop
 checkout develop
 commit
 commit
 checkout main
 merge develop
 commit
 commit
&lt;/pre>
&lt;p>In Mermaid, we support the basic git operations like:&lt;/p></description></item><item><title>Mindmap</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/mindmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/mindmap/</guid><description>&lt;h1 id="mindmap">Mindmap &lt;a href="#mindmap" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>Mindmap: This is an experimental diagram for now. The syntax and properties can change in future releases. The syntax is stable except for the icon integration which is the experimental part.&lt;/p>&lt;/blockquote>
&lt;p>&amp;ldquo;A mind map is a diagram used to visually organize information into a hierarchy, showing relationships among pieces of the whole. It is often created around a single concept, drawn as an image in the center of a blank page, to which associated representations of ideas such as images, words and parts of words are added. Major ideas are connected directly to the central concept, and other ideas branch out from those major ideas.&amp;rdquo; Wikipedia&lt;/p></description></item><item><title>Pie chart diagrams</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/pie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/pie/</guid><description>&lt;h1 id="pie-chart-diagrams">Pie chart diagrams &lt;a href="#pie-chart-diagrams" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>A pie chart (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice (and consequently its central angle and area), is proportional to the quantity it represents. While it is named for its resemblance to a pie which has been sliced, there are variations on the way it can be presented. The earliest known pie chart is generally credited to William Playfair&amp;rsquo;s Statistical Breviary of 1801
-Wikipedia&lt;/p></description></item><item><title>Quadrant Chart</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/quadrantchart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/quadrantchart/</guid><description>&lt;h1 id="quadrant-chart">Quadrant Chart &lt;a href="#quadrant-chart" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>A quadrant chart is a visual representation of data that is divided into four quadrants. It is used to plot data points on a two-dimensional grid, with one variable represented on the x-axis and another variable represented on the y-axis. The quadrants are determined by dividing the chart into four equal parts based on a set of criteria that is specific to the data being analyzed. Quadrant charts are often used to identify patterns and trends in data, and to prioritize actions based on the position of data points within the chart. They are commonly used in business, marketing, and risk management, among other fields.&lt;/p></description></item><item><title>Requirement Diagram</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/requirementdiagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/requirementdiagram/</guid><description>&lt;h1 id="requirement-diagram">Requirement Diagram &lt;a href="#requirement-diagram" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>A Requirement diagram provides a visualization for requirements and their connections, to each other and other documented elements. The modeling specs follow those defined by SysML v1.6.&lt;/p>&lt;/blockquote>
&lt;p>Rendering requirements is straightforward.&lt;/p>



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="097e04f" class="language-mermaid-example ">
 &lt;code> requirementDiagram

 requirement test_req {
 id: 1
 text: the test text.
 risk: high
 verifymethod: test
 }

 element test_entity {
 type: simulation
 }

 test_entity - satisfies -&amp;gt; test_req&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;pre class="mermaid"> requirementDiagram

 requirement test_req {
 id: 1
 text: the test text.
 risk: high
 verifymethod: test
 }

 element test_entity {
 type: simulation
 }

 test_entity - satisfies -&amp;gt; test_req
&lt;/pre>
&lt;h2 id="syntax">Syntax &lt;a href="#syntax" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>There are three types of components to a requirement diagram: requirement, element, and relationship.&lt;/p></description></item><item><title>Sankey diagram (v10.3.0+)</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/sankey/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/sankey/</guid><description>&lt;h1 id="sankey-diagram-v1030">Sankey diagram (v10.3.0+) &lt;a href="#sankey-diagram-v1030" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>A sankey diagram is a visualization used to depict a flow from one set of values to another.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>Warning&lt;/strong>
This is an experimental diagram. Its syntax are very close to plain CSV, but it is to be extended in the nearest future.&lt;/p>&lt;/blockquote>
&lt;p>The things being connected are called nodes and the connections are called links.&lt;/p>
&lt;h2 id="example">Example &lt;a href="#example" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>This example taken from &lt;a href="https://observablehq.com/@d3/sankey/2?collection=@d3/d3-sankey" rel="external" target="_blank">observable&lt;svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">&lt;path fill="currentColor" d="M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z"/>&lt;/svg>&lt;/a>. It may be rendered a little bit differently, though, in terms of size and colors.&lt;/p></description></item><item><title>Sequence diagrams</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/sequencediagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/sequencediagram/</guid><description>&lt;h1 id="sequence-diagrams">Sequence diagrams &lt;a href="#sequence-diagrams" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>A Sequence diagram is an interaction diagram that shows how processes operate with one another and in what order.&lt;/p>&lt;/blockquote>
&lt;p>Mermaid can render sequence diagrams.&lt;/p>



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="171ed4e" class="language-mermaid-example ">
 &lt;code>sequenceDiagram
 Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
 John--&amp;gt;&amp;gt;Alice: Great!
 Alice-)John: See you later!&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;pre class="mermaid">sequenceDiagram
 Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
 John--&amp;gt;&amp;gt;Alice: Great!
 Alice-)John: See you later!
&lt;/pre>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>
A note on nodes, the word &amp;ldquo;end&amp;rdquo; could potentially break the diagram, due to the way that the mermaid language is scripted.&lt;/p></description></item><item><title>State diagrams</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/statediagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/statediagram/</guid><description>&lt;h1 id="state-diagrams">State diagrams &lt;a href="#state-diagrams" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>&amp;ldquo;A state diagram is a type of diagram used in computer science and related fields to describe the behavior of systems.
State diagrams require that the system described is composed of a finite number of states; sometimes, this is indeed the
case, while at other times this is a reasonable abstraction.&amp;rdquo; Wikipedia&lt;/p>&lt;/blockquote>
&lt;p>Mermaid can render state diagrams. The syntax tries to be compliant with the syntax used in plantUml as this will make
it easier for users to share diagrams between mermaid and plantUml.&lt;/p></description></item><item><title>Timeline Diagram</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/timeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/timeline/</guid><description>&lt;h1 id="timeline-diagram">Timeline Diagram &lt;a href="#timeline-diagram" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>Timeline: This is an experimental diagram for now. The syntax and properties can change in future releases. The syntax is stable except for the icon integration which is the experimental part.&lt;/p>&lt;/blockquote>
&lt;p>&amp;ldquo;A timeline is a type of diagram used to illustrate a chronology of events, dates, or periods of time. It is usually presented graphically to indicate the passing of time, and it is usually organized chronologically. A basic timeline presents a list of events in chronological order, usually using dates as markers. A timeline can also be used to show the relationship between events, such as the relationship between the events of a person&amp;rsquo;s life.&amp;rdquo; Wikipedia&lt;/p></description></item><item><title>User Journey Diagram</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/userjourney/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/userjourney/</guid><description>&lt;h1 id="user-journey-diagram">User Journey Diagram &lt;a href="#user-journey-diagram" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>User journeys describe at a high level of detail exactly what steps different users take to complete a specific task within a system, application or website. This technique shows the current (as-is) user workflow, and reveals areas of improvement for the to-be workflow. (Wikipedia)&lt;/p>&lt;/blockquote>
&lt;p>Mermaid can render user journey diagrams:&lt;/p>



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="0d7d4c5" class="language-mermaid-example ">
 &lt;code>journey
 title My working day
 section Go to work
 Make tea: 5: Me
 Go upstairs: 3: Me
 Do work: 1: Me, Cat
 section Go home
 Go downstairs: 5: Me
 Sit down: 5: Me&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;pre class="mermaid">journey
 title My working day
 section Go to work
 Make tea: 5: Me
 Go upstairs: 3: Me
 Do work: 1: Me, Cat
 section Go home
 Go downstairs: 5: Me
 Sit down: 5: Me
&lt;/pre>
&lt;p>Each user journey is split into sections, these describe the part of the task
the user is trying to complete.&lt;/p></description></item><item><title>XY Chart</title><link>https://blahvalf.github.io/docs/mix/mermaid/syntax/xychart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blahvalf.github.io/docs/mix/mermaid/syntax/xychart/</guid><description>&lt;h1 id="xy-chart">XY Chart &lt;a href="#xy-chart" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>In the context of mermaid-js, the XY chart is a comprehensive charting module that encompasses various types of charts that utilize both x-axis and y-axis for data representation. Presently, it includes two fundamental chart types: the bar chart and the line chart. These charts are designed to visually display and analyze data that involve two numerical variables.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>It&amp;rsquo;s important to note that while the current implementation of mermaid-js includes these two chart types, the framework is designed to be dynamic and adaptable. Therefore, it has the capacity for expansion and the inclusion of additional chart types in the future. This means that users can expect an evolving suite of charting options within the XY chart module, catering to various data visualization needs as new chart types are introduced over time.&lt;/p></description></item></channel></rss>